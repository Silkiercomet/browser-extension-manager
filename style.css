:root {
  --neutral-900: hsl(227, 75%, 14%);
  --neutral-800: hsl(226, 25%, 17%);
  --neutral-700: hsl(225, 23%, 24%);
  --neutral-600: hsl(226, 11%, 37%);
  --neutral-300: hsl(0, 0%, 78%);
  --neutral-200: hsl(217, 61%, 90%);
  --neutral-100: hsl(0, 0%, 93%);
  --neutral-0: hsl(200, 60%, 99%);
  --red-400: hsl(3, 86%, 64%);
  --red-500: hsl(3, 71%, 56%);
  --red-700: hsl(3, 77%, 44%);
}
@font-face {
  font-family: "Noto Sans";
  src: url("assets/fonts/static/NotoSans-Medium.ttf") format("truetype");
  font-weight: 500;
}
@font-face {
  font-family: "Noto Sans";
  src: url("assets/fonts/static/NotoSans-Bold.ttf") format("truetype");
  font-weight: 700;
}
@font-face {
  font-family: "Noto Sans";
  src: url("assets/fonts/static/NotoSans-Regular.ttf") format("truetype");
  font-weight: 400;
}
/* 1. Use a more-intuitive box-sizing model */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* 2. Remove default margin */
* {
  margin: 0;
}
ul {
  padding-left: 0;
  list-style: none;
}
button {
  font-family: inherit;
  cursor: pointer;
  border: none;
  padding: 8px 15px;
  border-radius: 15px;
}
body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  min-height: 100vh;
  font-family: "Noto Sans", sans-serif;
  background: linear-gradient(180deg, #ebf2fc 0%, #eef8f9 100%);
  transition: 500ms ease-in-out;
}
.theme_container {
  width: 100%;
  height: 100%;
  padding: 30px 40px;
}
main {
  padding: 30px 40px;
}

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: var(--neutral-0);
  padding: 13px;
  border-radius: 15px;
  transition: 300ms ease-in-out;
}
.navbar_logo {
  max-height: 41px;
}
input[type="checkbox"] {
  display: none;
}
/* extension section */

.extensions_header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
  .extensions_header_btns {
    display: flex;
    gap: 5px;
  }
}

.extension_list {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
  gap: 10px;

  /* extension card */

  .extension_list_item {
    display: grid;
    padding: 20px;
    border-radius: 25px;
    border: 1px solid var(--neutral-200);
    background-color: var(--neutral-0);
    box-shadow: var(--neutral-200) 0px 8px 24px;
    transition: background-color 300ms ease-in-out;
    .extension_list_item_top {
      display: flex;
      gap: 10px;

      h3 {
        color: var(--neutral-900);
      }
      p {
        min-height: 8ch;
        color: var(--neutral-600);
      }
      img {
        max-width: 60px;
        max-height: 60px;
      }
    }

    .extension_list_item_bottom {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-top: 1rem;
    }
  }
}
.item_btn {
  background-color: transparent;
  border: 1px solid var(--neutral-200);
  color: var(--neutral-900);
  transition: 300ms ease-in-out;
  font-weight: 500;
  &:hover {
    color: var(--neutral-0);
    background-color: var(--red-500);
    border-color: var(--red-500);
  }
}
.btn {
  background-color: var(--neutral-0);
  border: 1px solid var(--neutral-300);
  font-weight: 500;
  transition: 300ms ease-in-out;

  &:hover {
    opacity: 0.5;
  }
}
.btn.active {
  background-color: var(--red-700);
  border-color: var(--red-500);
  color: var(--neutral-0);
  &:hover {
    opacity: 0.8;
  }
}
/* switch style*/
.switch {
  position: relative;
  display: inline-block;
  width: 45px;
  height: 25px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 19px;
  width: 19px;
  left: 4px;
  bottom: 3px;
  background-color: white;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

input:checked + .switch .slider {
  background-color: var(--red-700);
}

input:focus + .switch .slider {
  box-shadow: 0 0 1px var(--red-700);
}

input:checked + .switch .slider:before {
  -webkit-transform: translateX(20px);
  -ms-transform: translateX(20px);
  transform: translateX(20px);
}

/* Rounded sliders */
.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}

/* dark mode buttons */

#navbar_theme_btn {
  max-width: 40px;
  max-height: 40px;
  border-radius: 7px;
  display: grid;
  place-items: start;
  padding-inline: 0;
  overflow-x: hidden;
  div {
    display: flex;
    gap: 30px;
    width: 100%;
    height: 100%;
    padding-left: 10px;
    transition: 300ms ease-in-out;
  }
}

.dark_navbar #navbar_theme_btn {
  background-color: var(--neutral-700);
  div {
    transform: translateX(-53px);
  }
}
.dark_theme {
  background: linear-gradient(180deg, #040918 0%, #091540 100%);
  .extensions .extensions_header .extensions_header_btns > li .btn{
    background-color: var(--neutral-600);
    border-color: transparent;
    color: var(--neutral-0);
    &.active{
      background-color: var(--red-700);
    }
  }
  .extensions .extensions_header h1{
    color: var(--neutral-0);
  }
}
.dark_navbar {
  background-color: var(--neutral-800);
  .letters {
    fill: var(--neutral-0);
  }
}
/* Explanation:
The reason the styles in `.dark_item` are only applied with `!important` is likely due to specificity.  Another rule with higher specificity is already styling the same properties. CSS specificity determines which CSS rule is applied if multiple rules apply to the same element.

Here's how to approach fixing this, ordered from best to worst practice:

1.  **Increase Specificity (Targeted Approach):** The best solution is to make the selector for `.dark_item` *more specific* than the conflicting rules.  Examine the rules that are overriding the styles you want to apply.  Then, add selectors to the `.dark_item` rule to make it more specific. For example:

    *   If the element with `.dark_item` is within a parent with a specific ID, include that ID in your selector: `#parent-id .dark_item`.
    *   If the element with `.dark_item` has other classes, include those as well: `.dark_item.other-class`.
    *   If the element is directly nested inside another element `main > .dark_item`

    The goal is to win the specificity battle without resorting to `!important`.

2.  **Restructure Your CSS (Best Practice, but most work):** The ideal solution is to refactor your CSS to avoid specificity conflicts in the first place.  This might involve:

    *   **Reducing Nesting:**  Deeply nested selectors increase specificity.  Flatten your CSS structure where possible.
    *   **Using a CSS Methodology (BEM, OOCSS, etc.):**  These methodologies encourage flat, predictable CSS, which minimizes specificity issues.

3.  **Target element by parent theme class:** It is possible to target the `extension_list_item` elements that has the `dark_item` class by adding the `dark_theme` class to its parent. this way the style is applied only in that specific instance

4.  **`!important` (Use Sparingly):** While `!important` *will* solve the immediate problem, it should be a last resort. It makes your CSS harder to maintain and debug because it breaks the normal cascading order. If you use `!important`, add a comment explaining *why* it's necessary.

Here's the modified code reflecting the "Increase Specificity" approach.  **You'll need to adapt this to your specific HTML structure and the conflicting CSS rules.** Let's assume the `.dark_item` element is always within an element that also has a class of `.extension_list_item`:
*/

/*
   Or, if you target the element based on the "dark_theme" in the body:
*/

body.dark_theme .extension_list_item.dark_item {
  background-color: var(--neutral-800);
  border-color: var(--neutral-800);
  box-shadow: none;
  h3 {
    color: var(--neutral-0);
  }
  p {
    color: var(--neutral-300);
  }
  button {
    border-color: var(--neutral-600);
    color: var(--neutral-0);
    &:hover {
      border-color: transparent;
    }
  }
}

@media screen and (width < 600px) {
  .extensions_header{

    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;

  }
}
